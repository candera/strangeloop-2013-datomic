#+TITLE: Real World Datomic: An Experience Report
#+AUTHOR: Craig Andera
#+EMAIL: craig@thinkrelevance.com

* Real-World Datomic: An Experience Report                      :title:slide:

# Note: things using this comment syntax will not be exported

** COMMENT Outline

- About me and where I work
- Statement of the problem we're trying to solve
- Description of Datomic data model
- Description of query-based approach
- Explanation of Datomic indexes
- How this shows why query won't work
- Explanation of seek-datoms approach
- Explanation of caching
- Other stuff?
- Wrap-up

** Slides
*** Me                                                                :slide:
**** Craig Andera
**** @craigandera
**** craig@thinkrelevance.com
**** TODO Podcast URL?
**** TODO Update what needs updating
*** Room Key
**** http://roomkey.com
**** Employer of Clojure Programmers
**** http://is.gd/rkpodcast
*** The Problem                                                       :slide:
**** Provide a summary of sales funnel events for Room Key
**** Users move through the website
***** impression -> hotel details -> lead -> booking
**** Want per-day event counts by hotel & event type
**** 30 days * ~20 events/sec * ~5 hotels/event
***** => ~250M hotel-events
*** Datomic's Architecture                                            :slide:
[[file:datomic-architecture.png]]
*** Datomic's Data Model                                              :slide:
**** All facts stored as =datoms=
**** A datom is EAVT tuple
***** =Entity= The thing we're modeling
***** =Attribute= The aspect of the entity we're describing
***** =Value= The quantity of quality we're describing
***** =Time= When we learned this fact
*** Attributes                                                        :slide:
**** Have a _type_, an _ident_, and a _cardinality_
***** Optionally other stuff
**** Types include the usual scalars: strings, numbers, etc.
**** Also include =refs=
***** Value is an entity ID
***** Allows datoms to form graphs
*** Capturing Events - Schema                                         :slide:
| Attribute               | Type   | Qualifiers |
|-------------------------+--------+------------|
| =:roomkey.hotel/id=     | string | unique     |
| =:roomkey.event/type=   | ref    | single     |
| =:roomkey.event/hotels= | ref    | many       |
| =:roomkey.event/time=   | inst   | single     |

*** Capturing Events - Example                                        :slide:
file:schema1.png
*** Capturing Events - Refs                                           :slide:
file:schema1-with-refs.png
*** Storing and Retrieving Data in Datomic                            :slide:
**** One or more datoms submitted to the transactor
**** Datoms written transactionally to the log
**** All datoms in the transaction get the same =t= value
**** All datoms also stored redundantly in the =indexes=
*** Datomic Indexes                                                   :slide:
**** Every datom stored in two or more =indexes=
**** Index is logically a sorted set of datoms
**** Indexes named by their sort order
**** EAVT, AEVT, AVET, and VAET
*** EAVT and AEVT                                                     :slide:
**** All datoms stored in these
**** EAVT
***** Efficient access to all attributes of an entity
**** AEVT
***** Efficient access to all values of an attribute
*** Capturing Events - EAVT                                           :slide:
    :PROPERTIES:
    :HTML_CONTAINER_CLASS: eavt-table
    :END:

|    E | A     |        V |    T |
|------+-------+----------+------|
| 1234 | type  |      123 | 1111 |
| 1234 | time  | 10:13:02 | 1111 |
| 1234 | hotel |    12345 | 1111 |
| 1234 | hotel |    23456 | 1111 |
| 2345 | type  |      234 | 2222 |
| 2345 | time  | 10:14:22 | 2222 |
| 2345 | hotel |    23456 | 2222 |

*** Capturing Events - EAVT                                           :slide:
    :PROPERTIES:
    :HTML_CONTAINER_CLASS: eavt-table
    :END:

|    E | A     |        V |    T |
|------+-------+----------+------|
| 1234 | 26    |      123 | 1111 |
| 1234 | 27    | 10:13:02 | 1111 |
| 1234 | 28    |    12345 | 1111 |
| 1234 | 28    |    23456 | 1111 |
| 2345 | 26    |      234 | 2222 |
| 2345 | 27    | 10:14:22 | 2222 |
| 2345 | 28    |    23456 | 2222 |

*** Capturing Events - AEVT                                           :slide:
    :PROPERTIES:
    :HTML_CONTAINER_CLASS: eavt-table
    :END:

|    E | A     |        V |    T |
|------+-------+----------+------|
| 1234 | 26    |      123 | 1111 |
| 2345 | 26    |      234 | 2222 |
| 1234 | 27    | 10:13:02 | 1111 |
| 2345 | 27    | 10:14:22 | 2222 |
| 1234 | 28    |    12345 | 1111 |
| 1234 | 28    |    23456 | 1111 |
| 2345 | 28    |    23456 | 2222 |

*** AVET and VAET                                                     :slide:
**** AVET
***** Only stores datoms with attribute marked =:db/index=
***** Efficient lookup of entities by attribute/value pairing
**** VAET
***** Only stores datoms with attribute of type =ref=
***** Allows efficient navigation of relationships in reverse
***** Also called the =reverse index=
*** Capturing Events - AVET                                           :slide:
    :PROPERTIES:
    :HTML_CONTAINER_CLASS: eavt-table
    :END:

|     E |  A | V         |   T |
|-------+----+-----------+-----|
| 12345 | 25 | "Hotel 1" | 888 |
| 23456 | 25 | "Hotel 2" | 999 |

*** Capturing Events - VAET                                           :slide:
    :PROPERTIES:
    :HTML_CONTAINER_CLASS: eavt-table
    :END:

|    E | A     |        V |    T |
|------+-------+----------+------|
| 1234 | 26    |      123 | 1111 |
| 2345 | 26    |      234 | 2222 |
| 1234 | 28    |    12345 | 1111 |
| 1234 | 28    |    23456 | 1111 |
| 2345 | 28    |    23456 | 2222 |

*** Index Storage and Retrieval                                       :slide:
**** Datoms are stored in compressed chunks called =segments=
**** Segments are stored as a tree
**** Segments are immutable once written
**** Each transaction conceptually creates a new root
**** Actual indexing happens less frequently
**** Peers pull segments the appropriate index as needed
*** Trying to Solve the Problem - Query                               :slide:
#+begin_src clojure
  [:find ?event-type ?hotel-id ?day (count ?event)
   :in $ [?hotel-id ...] ?since
   :where
   [?hotel-eid :roomkey.hotel/id ?hotel-id]
   [?event :roomkey.event/hotel ?hotel-eid]
   [?event :roomkey.event/time ?time]
   [(<= ?since ?time)]
   [(roomkey.time/midnight ?time) ?day]
   [?event :roomkey.event/type ?event-type]]
#+end_src
*** Why This Didn't Work                                              :slide:
**** Too much data, not enough time: ~250M datoms, 100ms
**** No query order eliminates enough data
*** Anatomy of an Entity ID                                           :slide:
**** Entity IDs have two parts
***** High bits are the =partition= ID
***** Low bits are a timelike component
**** Partition ID user-assigned at entity creation
*** A Change In Approach                                              :slide:
**** Stop recording time explicitly
**** Record events using a dedicated partition
**** Use =seek-datoms=
***** Returns =java.lang.Iterable= over raw index data
***** Fast, lazy, reduceable
**** =entid-at=
***** Given a time and a partition, get an EID
**** A big, giant cache
*** The Code                                                          :slide:
    :PROPERTIES:
    :HTML_CONTAINER_CLASS: smaller-code
    :END:
#+begin_src clojure
  (defn- datoms-between
    "Returns a reducible collection of datoms created
    between the start and end dates in a single partition."
    [db partition start end]
    (let [start-e (d/entid-at db
                              partition
                              start)
          end-e   (d/entid-at db
                              partition
                              end)]
      (->> (d/seek-datoms db :eavt start-e)
           (r/take-while #(< (:e %) end-e)))))
#+end_src
*** Why You Shouldn't Always Do This                                  :slide:
**** Datalog is a big deal
***** Query as data
***** Future improvements to query
**** Segment caching: hot data often in-memory
*** Colophon                                                          :slide:
**** Appreciations
***** Tim Ewald
***** Rich Hickey
**** Typography
***** Carrois Gothic
** Questions?                                                   :title:slide:

** Thanks!                                                      :title:slide:

* Footer

#+TAGS: slide(s)

#+STYLE: <link rel="stylesheet" type="text/css" href="common.css" />
#+STYLE: <link rel="stylesheet" type="text/css" href="screen.css" media="screen" />
#+STYLE: <link rel="stylesheet" type="text/css" href="projection.css" media="projection" />
#+STYLE: <link rel="stylesheet" type="text/css" href="presenter.css" media="presenter" />
#+STYLE: <link rel="stylesheet" type="text/css" href="local.css" />

#+BEGIN_HTML
<script type="text/javascript" src="org-html-slideshow.js"></script>
#+END_HTML

# Local Variables:
# org-export-html-style-include-default: nil
# org-export-html-style-include-scripts: nil
# End:


